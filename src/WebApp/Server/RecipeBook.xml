<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebApp.Server</name>
    </assembly>
    <members>
        <member name="T:RecipeBook.Presentation.WebApp.Server.Controllers.BaseApiController`1">
            <summary>
            Contains all the common components of the api controllers.
            </summary>
        </member>
        <member name="T:RecipeBook.Presentation.WebApp.Server.Controllers.v1.RecipesController">
            <summary>
            Endpoints for CRUD of recipes.
            </summary>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.RecipesController.GetRecipe(System.String)">
            <summary>
            Gets a recipe by name.
            </summary>
            <param name="name">The name of the recipe</param>
            <returns>A Recipe with matching name</returns>
            <response code="200">Returns the matching recipe</response>
            <response code="404">If no recipe with matching name is found</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.RecipesController.GetAllRecipes">
            <summary>
            Gets all recipes.
            </summary>
            <returns>All recipes</returns>
            <response code="200">Returns the recipes</response>
            <response code="204">If there are no recipes</response>  
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.RecipesController.PostRecipe(RecipeBook.Core.Domain.Recipes.Recipe)">
             <summary>
             Creates a new recipe in the database.
             </summary>
             <remarks>
             Example body:
            
                 POST /
                 {
                     "name": "Test Recipe",
                     "rating": 10,
                     "usedOccasions": [],
                     "steps": [],
                     "ingredients": []
                 }
             </remarks>
             <returns>The location of the created recipe</returns>
             <response code="201">Returns the created recipe</response>
             <response code="409">If a recipe with provided name already exists</response>  
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.RecipesController.DeleteRecipe(System.String)">
            <summary>
            Deletes a recipe by name.
            </summary>
            <param name="name">The name of the recipe</param>
            <response code="200">The recipe was deleted</response>
            <response code="404">The recipe does not exist</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.RecipesController.PatchRecipe(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{RecipeBook.Core.Domain.Recipes.Recipe})">
             <summary>
             Updates an existing recipe in the database.
             </summary>
             <remarks>
             Example body:
            
                 PATCH /
                 [
                   {
                     "op": "replace",
                     "path": "/rating",
                     "value": 5
                   },
                   {
                     "op": "remove",
                     "path": "/rating"
                   }
                 ]
             </remarks>
             <response code="204">Recipe was successfully updated</response>
             <response code="400">Patch caused invalid state</response>
             <response code="404">Recipe does not exist</response>
        </member>
        <member name="T:RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel">
            <summary>
            Model for the error-page.
            </summary>
        </member>
        <member name="P:RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel.RequestId">
            <summary>
            ID of the request that caused the error.
            </summary>
        </member>
        <member name="P:RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel.ShowRequestId">
            <summary>
            Whether or not to show the ID.
            </summary>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel.#ctor(Microsoft.Extensions.Logging.ILogger{RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel})">
            <summary>
            Instantiates a new <see cref="T:RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel"/>.
            </summary>
            <param name="logger">Dependency injected.</param>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel.OnGet">
            <summary>
            Called when a GET-request is sent for the Error-page.
            </summary>
        </member>
    </members>
</doc>
