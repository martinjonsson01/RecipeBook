<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebApp.Server</name>
    </assembly>
    <members>
        <member name="T:RecipeBook.Presentation.WebApp.Server.Controllers.BaseApiController`1">
            <summary>
            Contains all the common components of the api controllers.
            </summary>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.ImagesController.GetImage(System.String,System.String)">
            <summary>
            Gets an image by name.
            </summary>
            <param name="recipeName">The name of the recipe of this image</param>
            <param name="imageName">The name of the image</param>
            <returns>An image with matching name</returns>
            <response code="200">Returns the matching image</response>
            <response code="404">If no image with matching name is found</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.ImagesController.PostImage(Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            Uploads an image.
            </summary>
            <returns>The location of the stored image</returns>
            <param name="recipeName">The name of the recipe of this image</param>
            <param name="image">The image to upload</param>
            <response code="201">Returns the location of the stored image</response>
            <response code="406">If image length is zero</response>  
            <response code="413">If image is too large</response>  
        </member>
        <member name="T:RecipeBook.Presentation.WebApp.Server.Controllers.v1.IngredientsController">
            This subclass of ResourceController is merely a facade with documentation applied.
            The actual implementation is in the base class.
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.IngredientsController.GetAll(System.String)">
            <summary>
            Gets all ingredients.
            </summary>
            <param name="recipeName">The name of the recipe containing the ingredients</param>
            <returns>All ingredients</returns>
            <response code="200">Returns the ingredients</response>
            <response code="204">If there are no ingredients</response>  
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.IngredientsController.Get(System.String,System.Nullable{System.Int32})">
            <summary>
            Gets an ingredient by Id.
            </summary>
            <param name="recipeName">The name of the recipe containing this ingredient</param>
            <param name="id">The Id of the ingredient</param>
            <returns>A ingredient with matching Id</returns>
            <response code="200">Returns the matching ingredient</response>
            <response code="404">If no ingredient with matching Id is found</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.IngredientsController.CreateOrUpdate(System.String,RecipeBook.Core.Domain.Recipes.Ingredient)">
            <summary>
            Creates a new or updates an existing ingredient.
            </summary>
            <param name="recipeName">The name of the recipe containing this resource</param>
            <param name="ingredient">The ingredient to create or update</param>
            <returns>A created or updated ingredient</returns>
            <response code="201">If a new ingredient was created</response>
            <response code="200">If an existing ingredient was updated</response>
            <response code="400">If a provided ingredient is wrong</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.IngredientsController.Delete(System.String,System.Nullable{System.Int32})">
            <summary>
            Deletes an ingredient by Id.
            </summary>
            <param name="recipeName">The name of the recipe containing this ingredient</param>
            <param name="id">The key of the ingredient</param>
            <response code="200">The ingredient was deleted</response>
            <response code="404">The ingredient does not exist</response>
            <response code="500">The server failed to delete the ingredient</response>
        </member>
        <member name="T:RecipeBook.Presentation.WebApp.Server.Controllers.v1.RecipesController">
            Note: Since this controller is top-level but still has to implement
            ResourceController (which assumes that the controller is a subset of /Recipes/)
            all parameters requiring a recipeName will be replaced with string.empty.
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.RecipesController.GetAll(System.String)">
            <summary>
            Gets all recipes.
            </summary>
            <returns>All recipes</returns>
            <param name="unused">Has no effect on response</param>
            <response code="200">Returns the recipes</response>
            <response code="204">If there are no recipes</response>  
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.RecipesController.Get(System.String,System.String)">
            <summary>
            Gets a image by name.
            </summary>
            <param name="unused">Has no effect on response</param>
            <param name="id">The name of the image</param>
            <returns>A image with matching name</returns>
            <response code="200">Returns the matching image</response>
            <response code="404">If no image with matching name is found</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.RecipesController.CreateOrUpdate(System.String,RecipeBook.Core.Domain.Recipes.Recipe)">
            <summary>
            Creates a new or updates an existing image.
            </summary>
            <param name="unused">Has no effect on response</param>
            <param name="image">The image to create or update</param>
            <returns>A created or updated image</returns>
            <response code="201">If a new image was created</response>
            <response code="200">If an existing image was updated</response>
            <response code="400">If image name is already taken</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.RecipesController.Delete(System.String,System.String)">
            <summary>
            Deletes a image by name.
            </summary>
            <param name="unused">Has no effect on response</param>
            <param name="id">The name of the image</param>
            <response code="200">The image was deleted</response>
            <response code="404">The image does not exist</response>
            <response code="500">The server failed to delete the image</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.ResourceController`3.GetAll(System.String)">
            <summary>
            Gets all resources.
            </summary>
            <param name="recipeName">The name of the recipe containing these resources</param>
            <returns>All resources</returns>
            <response code="200">Returns the resources</response>
            <response code="204">If there are no resources</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.ResourceController`3.Get(System.String,`2)">
            <summary>
            Gets a resource by key.
            </summary>
            <param name="recipeName">The name of the recipe containing this resource</param>
            <param name="id">The key of the resource</param>
            <returns>A resource with matching key</returns>
            <response code="200">Returns the matching resource</response>
            <response code="404">If no resource with matching key is found</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.ResourceController`3.CreateOrUpdate(System.String,`1)">
            <summary>
            Creates a new or updates an existing resource.
            </summary>
            <param name="recipeName">The name of the recipe containing this resource</param>
            <param name="entity">The resource to create or update</param>
            <returns>A created or updated resource</returns>
            <response code="201">If a new resource was created</response>
            <response code="200">If an existing resource was updated</response>
            <response code="400">If a provided entity is wrong</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.ResourceController`3.Delete(System.String,`2)">
            <summary>
            Deletes a resource by key.
            </summary>
            <param name="recipeName">The name of the recipe containing this resource</param>
            <param name="id">The key of the resource</param>
            <response code="200">The resource was deleted</response>
            <response code="404">The resource does not exist</response>
            <response code="500">The server failed to delete the resource</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.ResourceController`3.GetKey(`1)">
            <summary>
            Gets the key of a given entity.
            </summary>
        </member>
        <member name="T:RecipeBook.Presentation.WebApp.Server.Controllers.v1.StepsController">
            This subclass of ResourceController is merely a facade with documentation applied.
            The actual implementation is in the base class.
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.StepsController.GetAll(System.String)">
            <summary>
            Gets all steps.
            </summary>
            <param name="recipeName">The name of the recipe containing the steps</param>
            <returns>All steps</returns>
            <response code="200">Returns the steps</response>
            <response code="204">If there are no steps</response>  
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.StepsController.Get(System.String,System.Nullable{System.Int32})">
            <summary>
            Gets a step by Id.
            </summary>
            <param name="recipeName">The name of the recipe containing this step</param>
            <param name="id">The Id of the step</param>
            <returns>A step with matching Id</returns>
            <response code="200">Returns the matching step</response>
            <response code="404">If no step with matching Id is found</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.StepsController.CreateOrUpdate(System.String,RecipeBook.Core.Domain.Recipes.Step)">
            <summary>
            Creates a new or updates an existing step.
            </summary>
            <param name="recipeName">The name of the recipe containing this resource</param>
            <param name="step">The step to create or update</param>
            <returns>A created or updated step</returns>
            <response code="201">If a new step was created</response>
            <response code="200">If an existing step was updated</response>
            <response code="400">If a provided step is wrong</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.StepsController.Delete(System.String,System.Nullable{System.Int32})">
            <summary>
            Deletes a step by Id.
            </summary>
            <param name="recipeName">The name of the recipe containing this step</param>
            <param name="id">The key of the step</param>
            <response code="200">The step was deleted</response>
            <response code="404">The step does not exist</response>
            <response code="500">The server failed to delete the step</response>
        </member>
        <member name="T:RecipeBook.Presentation.WebApp.Server.Controllers.v1.UsedOccasionsController">
            This subclass of ResourceController is merely a facade with documentation applied.
            The actual implementation is in the base class.
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.UsedOccasionsController.GetAll(System.String)">
            <summary>
            Gets all used occasions.
            </summary>
            <param name="recipeName">The name of the recipe containing the used occasions</param>
            <returns>All used occasions</returns>
            <response code="200">Returns the used occasions</response>
            <response code="204">If there are no used occasions</response>  
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.UsedOccasionsController.Get(System.String,System.Nullable{System.Int32})">
            <summary>
            Gets a used occasion by Id.
            </summary>
            <param name="recipeName">The name of the recipe containing this used occasion</param>
            <param name="id">The Id of the used occasion</param>
            <returns>A used occasion with matching Id</returns>
            <response code="200">Returns the matching used occasion</response>
            <response code="404">If no used occasion with matching Id is found</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.UsedOccasionsController.CreateOrUpdate(System.String,RecipeBook.Core.Domain.Recipes.UsedOccasion)">
            <summary>
            Creates a new or updates an existing used occasion.
            </summary>
            <param name="recipeName">The name of the recipe containing this resource</param>
            <param name="usedOccasion">The used occasion to create or update</param>
            <returns>A created or updated used occasion</returns>
            <response code="201">If a new used occasion was created</response>
            <response code="200">If an existing used occasion was updated</response>
            <response code="400">If a provided used occasion is wrong</response>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Controllers.v1.UsedOccasionsController.Delete(System.String,System.Nullable{System.Int32})">
            <summary>
            Deletes a used occasion by Id.
            </summary>
            <param name="recipeName">The name of the recipe containing this used occasion</param>
            <param name="id">The key of the used occasion</param>
            <response code="200">The used occasion was deleted</response>
            <response code="404">The used occasion does not exist</response>
            <response code="500">The server failed to delete the used occasion</response>
        </member>
        <member name="T:RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel">
            <summary>
            Model for the error-page.
            </summary>
        </member>
        <member name="P:RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel.RequestId">
            <summary>
            ID of the request that caused the error.
            </summary>
        </member>
        <member name="P:RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel.ShowRequestId">
            <summary>
            Whether or not to show the ID.
            </summary>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel.#ctor(Microsoft.Extensions.Logging.ILogger{RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel})">
            <summary>
            Instantiates a new <see cref="T:RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel"/>.
            </summary>
            <param name="logger">Dependency injected.</param>
        </member>
        <member name="M:RecipeBook.Presentation.WebApp.Server.Pages.ErrorModel.OnGet">
            <summary>
            Called when a GET-request is sent for the Error-page.
            </summary>
        </member>
    </members>
</doc>
