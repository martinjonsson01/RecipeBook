@using RecipeBook.Core.Domain.Recipes

@inject IJSRuntime _js;

<SyncedView @ref="_syncedView"
            TResource="Step"
            DeleteItem="@DeleteItem"
            @attributes="AllOtherAttributes">
    <div class="d-flex">
        <h5 class="me-4">@Step.Number.</h5>
        <div class="d-flex w-100 flex-column">
            <textarea @ref="_input" class="remove-input-style w-100 step" type="text" @bind="Instruction" @bind:event="oninput"></textarea>
            @ChildContent
        </div>
    </div>
</SyncedView>

@* ReSharper disable twice UnusedParameter.Local *@
@* ReSharper disable twice InconsistentNaming *@

@code {
#nullable enable

    [Parameter]
    public Step Step { get; set; } = null!;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = __builder => { };

    [Parameter]
    public EventCallback DeleteItem { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AllOtherAttributes { get; set; } = null!;

    [CascadingParameter]
    public IHasFocusedItem<Step?> Focuser { get; set; } = null!;

    private ElementReference _input;

    private string Instruction
    {
        get => Step.Instruction;
        set
        {
            _js.InvokeVoidAsync("interopFunctions.textareaAutoHeight", _input);
            Step.Instruction = value;
            _syncedView.ResourceHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) 
            _syncedView.Initialize(Step);
        if (Step.Equals(Focuser.FocusedItem))
        {
            await _input.FocusAsync();
            await _js.InvokeVoidAsync("interopFunctions.selectText", _input);
            Focuser.FocusedItem = null;
        }

        await _js.InvokeVoidAsync("interopFunctions.textareaAutoHeight", _input);
    }

    private SyncedView<Step> _syncedView = null!;
}