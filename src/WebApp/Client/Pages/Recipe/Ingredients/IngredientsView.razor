@using RecipeBook.Core.Domain.Recipes

@inject IJSRuntime _js;

<div class="ingredients bg-white shadow">
    <FetchList TItem="Ingredient"
               Context="_ingredients"
               Url="@($"/api/v1/recipes/{RecipeName}/ingredients")">
        <Header>
            <h2 class="p-4">Ingredienser</h2>
        </Header>
        <ItemsTemplate>
            <div class="container">
                <div class="row">
                    @{
                        Ingredient[] ingredients = _ingredients as Ingredient[] ?? _ingredients.ToArray();
                    }
                    <div class="col-sm-4 p-0">
                        <ol class="no-style text-end pe-1">
                            @foreach (Ingredient ingredient in ingredients)
                            {
                                <li id="@($"unit-{ingredient.Id}")" class="mb-3" style="height: 5px">
                                    <UnitView @bind-Unit="@ingredient.Amount"/>
                                </li>
                            }
                        </ol>
                    </div>
                    <div class="col-sm p-0">
                        <ol class="no-style text-start ps-1">
                            @foreach (Ingredient ingredient in ingredients)
                            {
                                <li id="@($"ingredient-{ingredient.Id}")" class="mb-3">
                                    <IngredientView Url="@($"/api/v1/recipes/{RecipeName}/ingredients")"
                                                    Ingredient="@ingredient"
                                                    SetSaving="@SetSaving"/> 
                                </li>
                            }
                        </ol>
                    </div>
                </div>
            </div>
        </ItemsTemplate>
    </FetchList>
</div>

@code {
#nullable enable

    [Parameter]
    public string RecipeName { get; set; } = null!;

    [Parameter]
    public EventCallback<(string, LoadStatus)> SetSaving { get; set; } = EventCallback<(string, LoadStatus)>.Empty;

}