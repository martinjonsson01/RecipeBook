@using RecipeBook.Core.Domain.Recipes

@inject IJSRuntime _js;

<SyncedView @ref="_syncedView"
            TResource="Ingredient"
            @attributes="AllOtherAttributes"
            DeleteItem="@DeleteItem">
    <textarea @ref="_input" class="remove-input-style ingredient" type="text" @bind="Name" @bind:event="oninput"></textarea>
</SyncedView>

@code {
#nullable enable

    [Parameter]
    public Ingredient Ingredient { get; set; } = null!;

    [Parameter]
    public EventCallback DeleteItem { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AllOtherAttributes { get; set; } = null!;

    [CascadingParameter]
    public Ingredient? FocusItem { get; set; }

    private ElementReference _input;

    private string Name
    {
        get => Ingredient.Name;
        set
        {
            _js.InvokeVoidAsync("interopFunctions.textareaAutoHeight", _input);
            Ingredient.Name = value;
            _syncedView.ResourceHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _syncedView.Initialize(Ingredient);
        if (Ingredient.Equals(FocusItem))
            await _input.FocusAsync();
        
        await _js.InvokeVoidAsync("interopFunctions.textareaAutoHeight", _input);
    }

    private SyncedView<Ingredient> _syncedView = null!;
}