@using RecipeBook.Core.Domain.Recipes
@using Newtonsoft.Json
@using System.Timers
@using System.Text.Json
@using RecipeBook.Core.Application.Logic
@using System.IO
@using System.Net
@using Microsoft.Extensions.Logging

@inherits SyncedView<Recipe>

@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject ILogger<RecipeView> _logger
@inject IJSRuntime _js;

<div class="container">
    <div class="row mb-4">
        <InputFile OnChange="UploadImage"/>
        <img class="mb-2" src="@Recipe.ImagePath" alt="@Recipe.Name"/>
        <div class="col-sm-11 d-flex flex-column">
            <textarea @ref="_nameInput" class="remove-input-style display-4 name" type="text" @bind="Name" @bind:event="oninput"></textarea>
            <RatingInput @bind-Rating="@Rating"/>
        </div>
        <div class="col-sm-1 d-flex p-0">
            <LoadingIndicator Status="@GetStatus()"/>
        </div>
        <hr/>
    </div>
    <div class="row">
        <div class="col-sm-8">
            <StepsView RecipeName="@Recipe.Name" SetSaving="@SetSaving"/>
        </div>
        <div class="col-sm-4">
            <div class="row h-100">
                <div class="col-sm">
                    <IngredientsView RecipeName="@Recipe.Name" SetSaving="@SetSaving"/>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
#nullable enable

    [Parameter]
    public Recipe Recipe { get; set; } = null!;

    private ElementReference _nameInput;

    private string Name
    {
        get => Recipe.Name;
        set
        {
            _js.InvokeVoidAsync("interopFunctions.textareaAutoHeight", _nameInput);
            Recipe.Name = value;
            ResourceHasChanged();
        }
    }

    private int? Rating
    {
        get => Recipe.Rating;
        set
        {
            Recipe.Rating = value;
            ResourceHasChanged();
        }
    }

    private string? ImagePath
    {
        get => Recipe.ImagePath;
        set
        {
            Recipe.ImagePath = value;
            ResourceHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _js.InvokeVoidAsync("interopFunctions.textareaAutoHeight", _nameInput);
    }

    protected override void OnInitialized()
    {
        Url = "/api/v1/recipes";
        Initialize(Recipe);
        Synced += (_, _) => _navigationManager.NavigateTo($"/{Recipe.ToUrlSafeName()}");
    }

    protected override void SetSavingDelegate((string, LoadStatus) tuple) => SetSaving(tuple);

    private Dictionary<string, LoadStatus> _propertyLoading = new();


    private LoadStatus GetStatus()
    {
        if (_propertyLoading.ContainsValue(LoadStatus.Fail)) return LoadStatus.Fail;
        if (_propertyLoading.ContainsValue(LoadStatus.Loading)) return LoadStatus.Loading;
        if (_propertyLoading.Count == 0
            || AllLoadsAreSuccessful() && _propertyLoading.ContainsValue(LoadStatus.None))
            return LoadStatus.None;
        if (AllLoadsAreSuccessful()) return LoadStatus.Success;
        return LoadStatus.None;
    }

    private bool AllLoadsAreSuccessful()
    {
        return _propertyLoading.Values.All(status =>
            status is LoadStatus.Success or LoadStatus.None);
    }

    private new void SetSaving((string, LoadStatus) state)
    {
        (string property, LoadStatus status) = state;
        if (!_propertyLoading.TryAdd(property, status))
        {
            _propertyLoading[property] = status;
        }
        StateHasChanged();
    }

        private const string ImageUploadTag = "image upload";
    private long _maxFileSize = 1024 * 500;


    private async Task UploadImage(InputFileChangeEventArgs arg)
    {
        using var content = new MultipartFormDataContent();
        StreamContent fileContent;
        try
        {
            fileContent = new StreamContent(arg.File.OpenReadStream(_maxFileSize));
        }
        catch (IOException e)
        {
            Console.WriteLine(e);
            return;
        }

        if (arg.File.Size >= _maxFileSize)
        {
            _logger.LogInformation("{FileName} not uploaded", arg.File.Name);
            return;
        }

        content.Add(
            content: fileContent,
            name: "\"image\"",
            fileName: arg.File.Name);

        HttpResponseMessage response = await _http.PostAsync(
            $"api/v1/recipes/{Recipe.ToUrlSafeName()}/images", content);

        if (response.IsSuccessStatusCode)
        {
            ImagePath = response.Headers.Location?.ToString();
        }
    }

}