@using RecipeBook.Core.Domain.Recipes
@using Newtonsoft.Json
@using System.Timers
@using System.Text.Json
@using RecipeBook.Core.Application.Logic

@inject HttpClient _http
@inject NavigationManager _navigationManager

<div class="container">
    <div class="row mb-4">
        <img class="mb-2" src="@Recipe.ImagePath" alt="@Recipe.Name"/>
        <div class="col-sm-11">
            <input class="display-4" type="text" @bind="Name" @bind:event="oninput"/>
        </div>
        <div class="col-sm-1 d-flex p-0">
            <LoadingIndicator Status="@GetStatus()"/>
        </div>
        <hr/>
    </div>
    <div class="row">
        <input class="h4" type="number" @bind="Rating" @bind:event="oninput"/>
        <div class="col-sm-8">
            <StepsView RecipeName="@Recipe.Name" SetSaving="@SetSaving"/>
        </div>
        <div class="col-sm-4">
            <div class="row">
                <div class="col-sm">
                    <IngredientsView RecipeName="@Recipe.Name" SetSaving="@SetSaving"/>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
#nullable enable

    [Parameter]
    public Recipe Recipe { get; set; } = null!;

    private string Name
    {
        get => Recipe.Name;
        set
        {
            Recipe.Name = value;
            _inputSaver.ResourceHasChanged();
        }
    }

    private int? Rating
    {
        get => Recipe.Rating;
        set
        {
            Recipe.Rating = value;
            _inputSaver.ResourceHasChanged();
        }
    }

    private string? ImagePath
    {
        get => Recipe.ImagePath;
        set
        {
            Recipe.ImagePath = value;
            _inputSaver.ResourceHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        _inputSaver = new InputSaver<Recipe>(Recipe, _http, "/api/v1/recipes", SetSaving);
        _inputSaver.Saved += (_, _) => _navigationManager.NavigateTo($"/{Recipe.ToUrlSafeName()}");
    }

    private InputSaver<Recipe> _inputSaver = null!;
    private Dictionary<string, LoadStatus> _propertyLoading = new();

    private LoadStatus GetStatus()
    {
        if (_propertyLoading.ContainsValue(LoadStatus.Fail)) return LoadStatus.Fail;
        if (_propertyLoading.ContainsValue(LoadStatus.Loading)) return LoadStatus.Loading;
        if (_propertyLoading.Count == 0
            || AllLoadsAreSuccessful() && _propertyLoading.ContainsValue(LoadStatus.None))
            return LoadStatus.None;
        if (AllLoadsAreSuccessful()) return LoadStatus.Success;
        return LoadStatus.None;
    }

    private bool AllLoadsAreSuccessful()
    {
        return _propertyLoading.Values.All(status =>
            status is LoadStatus.Success or LoadStatus.None);
    }

    private void SetSaving((string, LoadStatus) state)
    {
        (string property, LoadStatus status) = state;
        if (!_propertyLoading.TryAdd(property, status))
        {
            _propertyLoading[property] = status;
        }
        StateHasChanged();
    }

}