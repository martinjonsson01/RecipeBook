@using RecipeBook.Core.Domain.Recipes
@using Newtonsoft.Json
@using System.Timers
@using System.Text.Json

@inject HttpClient _http
@inject NavigationManager _navigationManager

<div class="container">
    <div class="row mb-4">
        <img class="mb-2" src="@Recipe.ImagePath" alt="@Recipe.Name"/>
        <div class="col-sm-11">
            <input class="display-4" type="text" @bind="Name" @bind:event="oninput"/>
        </div>
        <div class="col-sm-1 d-flex p-0">
            <LoadingIndicator Status="@GetStatus()"/>
        </div>
        <hr/>
    </div>
    <div class="row">
        <div class="col-sm-8">
            <StepsView RecipeName="@Recipe.Name" SetSaving="@SetSaving"/>
        </div>
        <div class="col-sm-4">
            <div class="row">
                <div class="col-sm">
                    <IngredientsView RecipeName="@Recipe.Name" SetSaving="@SetSaving"/>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
#nullable enable

    [Parameter]
    public Recipe Recipe { get; set; } = null!;

    private string Name
    {
        get => Recipe.Name;
        set
        {
            Recipe.Name = value;
            ResetInputTimer();
        }
    }

    private int? Rating
    {
        get => Recipe.Rating;
        set
        {
            Recipe.Rating = value;
            ResetInputTimer();
        }
    }

    private string? ImagePath
    {
        get => Recipe.ImagePath;
        set
        {
            Recipe.ImagePath = value;
            ResetInputTimer();
        }
    }

    private const int CheckInputInterval = 100;
    private const int SaveToServerInterval = 1000;

    private Timer _inputTimer = new() { Interval = CheckInputInterval, AutoReset = true };

    protected override void OnInitialized()
    {
        UpdateLastSaved(true);
        _inputTimer.Elapsed += CheckInput;
        _inputTimer.Start();
    }

    private Recipe? _lastSavedRecipe;
    private DateTime _lastInputSave = DateTime.MinValue;

    private void ResetInputTimer()
    {
        SetSaving(("input", LoadStatus.None)); // To indicate that displayed data is not saved
    }

    private Dictionary<string, LoadStatus> _propertyLoading = new();

    private LoadStatus GetStatus()
    {
        if (_propertyLoading.ContainsValue(LoadStatus.Fail)) return LoadStatus.Fail;
        if (_propertyLoading.ContainsValue(LoadStatus.Loading)) return LoadStatus.Loading;
        if (_propertyLoading.Count == 0
            || AllLoadsAreSuccessful() && _propertyLoading.ContainsValue(LoadStatus.None))
            return LoadStatus.None;
        if (AllLoadsAreSuccessful()) return LoadStatus.Success;
        return LoadStatus.None;
    }

    private bool AllLoadsAreSuccessful()
    {
        return _propertyLoading.Values.All(status =>
            status is LoadStatus.Success or LoadStatus.None);
    }

    private void SetSaving((string, LoadStatus) state)
    {
        (string property, LoadStatus status) = state;
        if (!_propertyLoading.TryAdd(property, status))
        {
            _propertyLoading[property] = status;
        }
        StateHasChanged();
    }

    private async void CheckInput(object sender, ElapsedEventArgs e)
    {
        if (DateTime.Now.Subtract(_lastInputSave) <= TimeSpan.FromMilliseconds(SaveToServerInterval)) return;
        if (Recipe.Equals(_lastSavedRecipe)) return;

        await SaveRecipe();
    }

    private async Task SaveRecipe()
    {
        UpdateLastSaved();
        SetSaving(("input", LoadStatus.Loading));
        SetSaving(("save to server", LoadStatus.Loading));
        HttpResponseMessage response = await _http.PutAsJsonAsync("/api/v1/recipes", Recipe);
        LoadStatus status = response.IsSuccessStatusCode ? LoadStatus.Success : LoadStatus.Fail;
        _navigationManager.NavigateTo($"/{Recipe.ToUrlSafeName()}");
        SetSaving(("save to server", status));
        SetSaving(("input", status));
    }

    private void UpdateLastSaved(bool init = false)
    {
        if (!init) _lastInputSave = DateTime.Now;
        _lastSavedRecipe = Recipe.Clone();
    }

}