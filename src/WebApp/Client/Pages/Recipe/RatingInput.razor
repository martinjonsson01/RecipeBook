@using System.Globalization

<fieldset class="rate">
    <input type="radio" checked="@(Rating == 10)" @onchange="OnRatingChanged" id="rating10" name="rating" value="10"/><label for="rating10" title="5 stars"></label>
    <input type="radio" checked="@(Rating == 9)" @onchange="OnRatingChanged" id="rating9" name="rating" value="9"/><label class="half" for="rating9" title="4 1/2 stars"></label>
    <input type="radio" checked="@(Rating == 8)" @onchange="OnRatingChanged" id="rating8" name="rating" value="8"/><label for="rating8" title="4 stars"></label>
    <input type="radio" checked="@(Rating == 7)" @onchange="OnRatingChanged" id="rating7" name="rating" value="7"/><label class="half" for="rating7" title="3 1/2 stars"></label>
    <input type="radio" checked="@(Rating == 6)" @onchange="OnRatingChanged" id="rating6" name="rating" value="6"/><label for="rating6" title="3 stars"></label>
    <input type="radio" checked="@(Rating == 5)" @onchange="OnRatingChanged" id="rating5" name="rating" value="5"/><label class="half" for="rating5" title="2 1/2 stars"></label>
    <input type="radio" checked="@(Rating == 4)" @onchange="OnRatingChanged" id="rating4" name="rating" value="4"/><label for="rating4" title="2 stars"></label>
    <input type="radio" checked="@(Rating == 3)" @onchange="OnRatingChanged" id="rating3" name="rating" value="3"/><label class="half" for="rating3" title="1 1/2 stars"></label>
    <input type="radio" checked="@(Rating == 2)" @onchange="OnRatingChanged" id="rating2" name="rating" value="2"/><label for="rating2" title="1 star"></label>
    <input type="radio" checked="@(Rating == 1)" @onchange="OnRatingChanged" id="rating1" name="rating" value="1"/><label class="half" for="rating1" title="1/2 star"></label>
</fieldset>

@code {
#nullable enable

    [Parameter]
    public int? Rating { get; set; }

    [Parameter]
    public EventCallback<int?> RatingChanged { get; set; }

    private async Task OnRatingChanged(ChangeEventArgs arg)
    {
        int? intValue = ParseChangeArgs(arg);
        await RatingChanged.InvokeAsync(intValue);
    }

    private int? ParseChangeArgs(ChangeEventArgs arg)
    {
        if (arg.Value is not string inputString) return null;

        var format = new NumberFormatInfo { NegativeSign = "-" };
        if (int.TryParse(inputString, NumberStyles.Integer, format, out int intValue))
            return intValue;
        return null;
    }
}