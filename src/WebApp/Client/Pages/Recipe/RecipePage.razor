@page "/{recipeName}"

@using RecipeBook.Core.Domain.Recipes
@using System.Net
@using Newtonsoft.Json

@inject HttpClient Http

<div class="p-3 bg-light">
    @if (_recipe is not null)
    {
        <RecipeView Recipe="@_recipe" />
    }
    else if (_responseStatus is null)
    {
        <RecipePlaceholder RecipeNameUrlSafe="@RecipeName"/>
    }
    else if (_responseStatus == HttpStatusCode.NotFound)
    {
        <h2>Kunde inte hitta receptet</h2>
    }
</div>

@code {
#nullable enable

    [Parameter]
    public string RecipeName { get; set; } = "Does not exist";

    private Recipe? _recipe;

    private HttpStatusCode? _responseStatus;

    protected override async Task OnParametersSetAsync()
    {
        // No need to re-fetch if the local model has the updated name.
        string urlSafeName = Recipe.ToUrlSafeName(RecipeName);
        if (urlSafeName.Equals(_recipe?.ToUrlSafeName())) return;
        
        _recipe = null;
        _responseStatus = null;

        HttpResponseMessage response = await Http.GetAsync($"/api/v1/recipes/{urlSafeName}");
        if (response.StatusCode == HttpStatusCode.OK)
        {
            var serializerOptions = new JsonSerializerSettings
            {
                TypeNameHandling = TypeNameHandling.Auto
            };
            
            string json = await response.Content.ReadAsStringAsync();
            _recipe = JsonConvert.DeserializeObject<Recipe>(json, serializerOptions);
            
            return;
        }
        _responseStatus = response.StatusCode;
    }

}