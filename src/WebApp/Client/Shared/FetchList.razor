@using System.Net
@using Newtonsoft.Json
@using RecipeBook.Core.Application.Logic
@using System.Collections.ObjectModel
@using System.Collections.Specialized
@using System.Text
@using System.Collections

@typeparam TItem

@inject HttpClient _http

@Header
@if (_items is not null)
{
    <CascadingValue Value="(IHasFocusedItem<TItem>) this">
        @ItemsTemplate(_items)
    </CascadingValue>
    <div class="d-flex justify-content-center">
        @CreateNewButtonTemplate(_items)
    </div>
}
else if (_responseStatus is null)
{
    @LoadingTemplate
}
else if (_responseStatus == HttpStatusCode.NotFound)
{
    @NotFoundTemplate
}
else if (_responseStatus == HttpStatusCode.NoContent)
{
    <div class="d-flex justify-content-center">
        @CreateNewButtonTemplate(_items)
    </div>
}

@* ReSharper disable twice InconsistentNaming *@
@* ReSharper disable twice UnusedParameter.Local *@

@code {
#nullable enable

    [Parameter]
    public string Url { get; set; } = string.Empty;

    [Parameter]
    public RenderFragment Header { get; set; } = null!;

    [Parameter]
    public EventCallback<(string, LoadStatus)> SetSaving { get; set; }

    [Parameter]
    public RenderFragment<ObservableCollection<TItem>?> ItemsTemplate { get; set; } = null!;

    [Parameter]
    public RenderFragment<ObservableCollection<TItem>?> CreateNewButtonTemplate { get; set; } = null!;

    [Parameter]
    public RenderFragment LoadingTemplate { get; set; } = __builder =>
    {
        <LoadingIndicator Status="@LoadStatus.Loading"/>
    };

    [Parameter]
    public RenderFragment NotFoundTemplate { get; set; } = __builder =>
    {
        <p>Kunde inte hitta resurs</p>
    };

}